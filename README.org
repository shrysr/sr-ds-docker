* Preamble

The starting point of this project was [[https://github.com/business-science/shinyauth][Matt Dancho's shinyauth]] docker file, which has been generally referred to as the base template in this document. The initial focus will be on R, and will slowly extend to including Python as well.

In this regard, the [[https://hub.docker.com/r/datascienceschool/rpython][Data Science School's docker image]] is quite useful as a comprehensive reference as well.

The goal is to develop a workflow based on Docker (and other tools) to create a reproducible, standard, consistent environment to run datascience projects, with different development and production environments.

** Plan


*** List of images planned

1. Development : R based
   1. [ ] R Shiny server - version to be specified
   2. R studio server:latest
   3. Tidyverse + ML + EDA packages  - version to be specified.

2. Production for Shiny apps
   1. R Shiny server : the same version as corresponding development image
   2. Tidyverse + ML + EDA packages : the same versions corresponding to development image

*** Tasks

**** Primary
- [ ] provide specific versions of atleast the major components, like docker images, and meta-packages and other tools.
- [ ] Efficient method to update system package versions.
- [ ] Efficient method to update R packages painlessly.
- [ ] Start with a minimal OS layer, like Ubuntu or even Alpine.
- [ ] Create tests to ensure the docker image is working as expected. Consider techniques like Continuous Integration (CI)
- [ ] Add a file with the R session, package and other relevant information to be automatically generated when a container is run and printed to a file in the working directory.
- [ ] Create clearly distinct production and development environments
- [ ] Ensure streamlined connection to specific containers from Org mode source blocks.

**** Good to have
- [ ] Construct my own shiny server rather than relying on an external official image.
- [ ] Evaluate integrating workflows using Drake,
-
* Notes
/There is also a bunch of general docker related notes and references [[https://shreyas.ragavan.co/docs/docker-notes/][on my website]]./

** Tools and methodology

I am currently creating dockerfiles via source code blocks inserted into Org mode documents. i.e a single Readme.org is where I will edit all the dockerfiles in this repository, which are then tangled into the dockerfiles automatically.

The Org mode format can be leveraged to record comments and notes about each dockerfile and setup within the readme document itself thus creating a literate environment.

Since each template is under it's own Org heading, the specific heading can even be exported as an org file which can be externally tangled into these source files without needing the installation of Emacs. This makes the possibilities rather interesting. Down the line, further optimisations will be made

Beyond this, tools like [[https://github.com/emacs-pe/docker-tramp.el/blob/master/README.md?utm_source=share&utm_medium=ios_app&utm_name=iossmf][docker-tramp]] can be used with Emacs to have org babel source blocks connect directly to docker instances and have the results printed in the local buffer. This enables a standard environment for development.

** TODO Running these files

The following options exist:

1. Pull the latest image from docker hub : =docker pull shrysr/datasciencer= and run the container. This will reference the [[id:0DA3DB49-0DDC-4A45-AB71-F4FDE41ACE23][Adding All libraries to the Template]], wherein the latest versions of all the files will be used.
3. Copy the contents of the dockerfile and paste into your docker file.
4. Alternately, this repo can be cloned, and the dockerfile can be specified with the =f= flag for example =docker build . -f ~/temp/testdocker=

** Launching the docker container

These are some variations of snippets used for connecting to the container placed here for ready reference.

/Note that the local test_app folder has to be created/

#+BEGIN_SRC sh :tangle no :results verbatim replace
#+/bin/bash
docker container run -Pit -d --rm  -p 3838:3838 -p 8787:8787 \
-v /Users/shrysr/my_projects/sr-ds-docker/test_app/:/srv/shiny-server/test_app \
-v /Users/shrysr/my_projects/sr-ds-docker/test_app/log/shiny-server/:/var/log/shiny-server/ \
shrysr/datasciencer:test
#+END_SRC

#+RESULTS:
: 347baed2d55e42bbf07508b9cdce0b15850c645fea3d137274daec61ac666ee9

** Strategy
- Using the =:latest= tag is useful only for some some circumstances, because there seems to be no point in using docker images if specific versions of libraries and packages are not set and updated with care from time to time. However, atleast one image may be worth having referencing the latest version of all the libraries. This container could be used for a test to know compatibility with the latest libraries.
- Dockerhub has a build feature wherein a github / bitbucket repo can be linked and each new  commit will trigger a build. A specific location can also be specified for the dockerfile, or a git branch name or tag. Though caching and etc are possible, the build time appears to be no better than local build time. However, this is certainly useful for subsequent builds with minor changes. It saves the effort required to commit a new image and push it to dockerhub.

** Status Log

#+BEGIN_QUOTE
Current Status, [2020-01-03 Fri]
This dockerfile will launch a shiny server to listen at the specified port. Some additional libraries like umap, glmnet, inspectdf, DataExplorer have been added in layers. The github repo is linked to the [[https://hub.docker.com/repository/docker/shrysr/datasciencer][image on dockerhub]].
#+END_QUOTE

* Latest Libraries - Shiny and RStudio server
:PROPERTIES:
:header-args: :mkdirp yes :tangle ./all_inclusive_latest/Dockerfile
:ID:       0DA3DB49-0DDC-4A45-AB71-F4FDE41ACE23
:END:

** Overview

Base image: rocker/shinyverse

Beyond a list of OS libraries in the basic template, the following additional libraries are installed:
1. pandoc
2. pandoc-cite
3. dtrx
4. tree

R Libraries in addition to the base template grouped into general categories:

ML
1. glmnet
2. Umap /(Currently on a separate layer as it has a lot of dependencies and is a large install)/
3. recipes
4. rsample
5. rpart.plot
6. caret

EDA
1. inspectdf
2. DataExplorer
3. janitor

Management
1. drake
2. binder
3. easypackages
4. remotes
5. From github:  karthik/holepunch

** Dockerfile
:PROPERTIES:
:ID:       4F6FDA93-F5E2-407A-88BE-F0796BC93935
:END:

*** Container run command

#+BEGIN_SRC sh :tangle no :results verbatim replace
#+/bin/bash
docker container run -Pit -d --rm  -p 3838:3838 -p 8787:8787 \
-v /Users/shrysr/my_projects/sr-ds-docker/test_app/:/srv/shiny-server/test_app \
-v /Users/shrysr/my_projects/sr-ds-docker/test_app/log/shiny-server/:/var/log/shiny-server/ \
shrysr/datasciencer:test
#+END_SRC

#+RESULTS:
: 22cc8f5551fcfbaf11eaca9ee1910efbde586664af588e6e53365a4de79c326f

*** Dockerfile contents
:PROPERTIES:
:ID:       BD86EADA-C652-4132-BA11-DBFEE0A84DB2
:END:

#+BEGIN_SRC dockerfile
FROM rocker/shiny-verse:latest

LABEL maintainer="Shreyas Ragavan <sr@eml.cc>" \
	version="1.0"

# System update and installing a bunch of OS libraries
RUN apt-get update -qq \
	&& apt-get -y --no-install-recommends install \
	lbzip2 \
	libfftw3-dev \
        libgdal-dev \
        libgeos-dev \
        libgsl0-dev \
        libgl1-mesa-dev \
        libglu1-mesa-dev \
        libhdf4-alt-dev \
        libhdf5-dev \
        libjq-dev \
        liblwgeom-dev \
        libpq-dev \
        libproj-dev \
        libprotobuf-dev \
        libnetcdf-dev \
        libsqlite3-dev \
        libssl-dev \
        libudunits2-dev \
        netcdf-bin \
        postgis \
        protobuf-compiler \
        sqlite3 \
        tk-dev \
        unixodbc-dev \
        libsasl2-dev \
        libv8-dev \
	libsodium-dev \
# Adding a custom list of packages from this point
        pandoc \
	pandoc-citeproc \
	dtrx \
	tree \
	libzmq3-dev \
# Removing temporary files generated after package changes
	&& rm -rf /var/lib/apt \
	&& apt-get autoclean

# Installing minimum R libraries for shiny
RUN install2.r --error --deps TRUE \
	shinyWidgets \
        shinythemes \
        shinyjs

# Intalling DB interfacing libraries
RUN install2.r --error --deps TRUE \
	mongolite \
        jsonlite \
        config

# Tidyquant and Remotes
RUN install2.r --error --deps TRUE \
	tidyquant

# Installing plotly
RUN install2.r --error --deps TRUE \
	plotly

# Separating Umap to a separate layer to save time while building the image
RUN install2.r --error --deps TRUE \
	umap

# Installing libraries for EDA
RUN install2.r --error --deps TRUE \
    	inspectdf \
	DataExplorer \
	janitor

# Installing libraries for ML
RUN install2.r --error --deps TRUE \
	glmnet \
	parsnip \
	recipes \
	rsample \
	rpart.plot \
	caret

# Installing libraries related to reproducibility DevOps, planning, package management
RUN install2.r --error --deps TRUE \
	drake \
	easypackages \
	remotes \
	&& installGithub.r karthik/holepunch

# Adding Rstudio server preview version as an environment variable which can be changed.
# Reference: https://github.com/datascienceschool/docker_rpython/blob/0c01b0b52834f6b3bb8a0c930a3d43899ea60ce6/02_rpython/Dockerfile#L17

USER root
ENV RSTUDIOSERVER_VERSION 1.2.5036
ENV RSTUDIO_SERVER_ON ON
RUN \
apt-get update \
&& apt-get install psmisc \
&& mkdir -p /download && cd /download \
&& wget https://s3.amazonaws.com/rstudio-ide-build/server/bionic/amd64/rstudio-server-${RSTUDIOSERVER_VERSION}-amd64.deb \
&& gdebi --n rstudio-server-${RSTUDIOSERVER_VERSION}-amd64.deb \
&& rm -rf /download \
&& rm -rf /var/lib/apt \
&& apt-get autoclean
#$$ if {$RSTUDIO_SERVER_ON}
# Settings for RStudio-Server

EXPOSE 8787
RUN rstudio-server start

#+END_SRC

* Experimental Containers
:PROPERTIES:
:header-args: :mkdirp yes :tangle ./experiment_docker/Dockerfile
:ID:       81A5C2EA-4760-47F2-BDDE-F194A765E2BB
:END:

#+BEGIN_SRC sh :tangle no
docker image ls
#+END_SRC

#+RESULTS:
| REPOSITORY             | TAG        | IMAGE        | ID | CREATED | SIZE |        |
| srds                   | latest     | f3313b691514 | 13 | hours   | ago  | 2.93GB |
| shrysr/datasciencer    | latest     | f3313b691514 | 13 | hours   | ago  | 2.93GB |
| <none>                 | <none>     | b9761ac214a5 | 13 | hours   | ago  | 2.81GB |
| umaptest               | latest     | 09ccf15c3239 | 16 | hours   | ago  | 2.91GB |
| web2                   | latest     | 7d717b392c2e |  4 | months  | ago  | 73.7MB |
| <none>                 | <none>     | 0d3af5fe4466 |  4 | months  | ago  | 73.7MB |
| <none>                 | <none>     | 63429fdd1b85 |  4 | months  | ago  | 73.7MB |
| rocker/tidyverse       | latest     | 023907c7da33 |  5 | months  | ago  | 2.1GB  |
| <none>                 | <none>     | 363837418c2b |  5 | months  | ago  | 73.7MB |
| rocker/shiny-verse     | latest     | 87397fc3e62a |  5 | months  | ago  | 1.86GB |
| <none>                 | <none>     | 53aea7a47e1a |  5 | months  | ago  | 73.7MB |
| web1                   | latest     | 1ca29acbe073 |  5 | months  | ago  | 73.1MB |
| <none>                 | <none>     | 289ce05fc9c9 |  5 | months  | ago  | 73.1MB |
| python                 | 2.7-alpine | f101ac3346a7 |  5 | months  | ago  | 61.7MB |
| redis                  | latest     | bb0ab8a99fe6 |  6 | months  | ago  | 95MB   |
| nginx                  | latest     | f68d6e55e065 |  6 | months  | ago  | 109MB  |
| ubuntu                 | latest     | 4c108a37151f |  6 | months  | ago  | 64.2MB |
| hello-world            | latest     | fce289e99eb9 | 12 | months  | ago  | 1.84kB |
| rickfast/hello-oreilly | latest     | ec347d11e305 |  3 | years   | ago  | 4.79MB |

#+BEGIN_SRC dockerfile
FROM shrysr/datasciencer as base1
FROM rocker/tidyverse
COPY  --from=base1 * .
#+END_SRC

* Test Shiny App
:PROPERTIES:
:header-args: :mkdirp yes :tangle ./test_app/app.R
:ID:       9F2868CD-5A4C-40C9-885C-C522822967B4
:END:

A bunch of apps will be included here for the purpose of quickly testing functionality of widgets and etc.

** Widget Gallery
:PROPERTIES:
:ID:       9C26940D-010B-465B-AEA3-944B0BC0048F
:END:

#+BEGIN_SRC R
library(shiny)

## Define UI
ui  <- fluidPage(
  titlePanel("Basic widget exploration"),

  fluidRow(

    column(2,
           h3("buttons"),
           actionButton("action007", label ="Action"),
           br(),
           br(),
           submitButton("Submit")
           ),
    column(2,
           h3("Single Checkbox"),
           checkboxInput("checkbox", "Choice A", value = T)
           ),
    column(3,
           checkboxGroupInput("checkGroup",
                              h3("checkbox group"),
                              choices = list("Choice 1" = 1,
                                             "Choice 2" = 2,
                                             "Choice 3" = 3
                                             ),
                              selected = 1
                              )
           ),
    column(2,
           dateInput("date",
                     h3("date input"),
                     value = ""
                     )
           )

  ),
  ## Inserting another fluid row element
  fluidRow(

    column(2,
           radioButtons("radio",
                        h3("Radio Buttons"),
                        choices = list("choice 1" = 1,
                                       "choice 2" = 2,
                                       "Radio 3"  = 3
                                       ),
                        selected =1
                        )
           ),

    column(2,
           selectInput("select",
                       h3("Select box"),
                       choices = list("choice 1" = 1,
                                      "choice 2" = 2,
                                      "choice 3" = 3
                                      ),
                       selected = 1
                       )
           ),
    column(2,
           sliderInput("slider1",
                       h3("Sliders"),
                       min = 0,
                       max = 100,
                       value = 50
                       ),

           sliderInput("slider2",
                       h3("Another Slider"),
                       min = 50,
                       max = 200,
                       value = c(60,80)
                       )
           ),
    column(2,
           selectInput("selectbox1",
                     h3("select from drop down box"),
                     choices = list("choice 1" = 22,
                                    "choice 2" = 2,
                                    "choice fake 3" = 33
                                    ),
                     selected = ""
                     )
           )

  ),
  fluidRow(
    column(3,
           dateRangeInput("daterange",
                          h3("Date range input")
                          )
           ),

    column(3,
           fileInput("fileinput",
                     h3("Select File")
                     )
           ),

    column(3,
           numericInput("numinput",
                        h3("Enter numeric value"),
                        value = 10
                        )
           ),
    column(3,
           h3("help text"),
           helpText("Hello this is line one.",
                    "This is line 2..\n",
                    "This is line 3."
                    )
           )
  )
)


## Define server logic

server <- function(input, output){


}



## Run the app
shinyApp(ui = ui, server = server)
#+END_SRC

* Basic Template
:PROPERTIES:
:header-args: :mkdirp yes :tangle ./base_template/DockerFile
:ID:       797160F1-F068-4E2F-A4C7-E9D9A87B0B81
:END:

Matt Dancho's template as of [2020-01-02 Thu], placed here for ready reference.

#+BEGIN_SRC dockerfile
FROM rocker/shiny-verse:latest

RUN apt-get update -qq \
    && apt-get -y --no-install-recommends install \
        lbzip2 \
        libfftw3-dev \
        libgdal-dev \
        libgeos-dev \
        libgsl0-dev \
        libgl1-mesa-dev \
        libglu1-mesa-dev \
        libhdf4-alt-dev \
        libhdf5-dev \
        libjq-dev \
        liblwgeom-dev \
        libpq-dev \
        libproj-dev \
        libprotobuf-dev \
        libnetcdf-dev \
        libsqlite3-dev \
        libssl-dev \
        libudunits2-dev \
        netcdf-bin \
        postgis \
        protobuf-compiler \
        sqlite3 \
        tk-dev \
        unixodbc-dev \
        libsasl2-dev \
        libv8-dev \
        libsodium-dev \
    && install2.r --error --deps TRUE \
        shinyWidgets \
        shinythemes \
        shinyjs \
        mongolite \
        jsonlite \
        config \
        remotes \
        tidyquant \
        plotly \
    && installGithub.r business-science/shinyauthr
#+END_SRC
